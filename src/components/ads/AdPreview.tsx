'use client';

import { Copy, Check } from 'lucide-react';
import { useState } from 'react';
import { AdContent, AIProvider } from '@/types';
import { toast } from 'sonner';

interface AdPreviewProps {
  ad: AdContent;
  provider: AIProvider;
  withResearch?: boolean;
  researchQuality?: number;
}

export function AdPreview({
  ad,
  provider,
  withResearch = false,
  researchQuality,
}: AdPreviewProps) {
  const [copiedField, setCopiedField] = useState<string | null>(null);
  const [showExplanations, setShowExplanations] = useState(false);

  const copyToClipboard = async (text: string, field: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedField(field);
      toast.success(`${field} copied to clipboard!`);
      setTimeout(() => setCopiedField(null), 2000);
    } catch {
      toast.error('Failed to copy to clipboard');
    }
  };

  const providerLabels = {
    claude: 'Claude (Anthropic)',
    openai: 'GPT-4 (OpenAI)',
    gemini: 'Gemini (Google)',
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between flex-wrap gap-3">
        <h2 className="text-2xl font-bold">Generated Ad</h2>
        <div className="flex items-center gap-3 flex-wrap">
          {withResearch && (
            <span className="inline-flex items-center gap-1.5 px-3 py-1 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-full text-xs font-semibold shadow-md">
              <svg
                className="w-3.5 h-3.5"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
              </svg>
              Con Research
              {researchQuality && (
                <span className="ml-1 opacity-90">({researchQuality}/100)</span>
              )}
            </span>
          )}
          <span className="text-sm text-gray-500 dark:text-gray-400">
            Generated by {providerLabels[provider]}
          </span>
        </div>
      </div>

      <div className="bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-900 rounded-xl p-6 space-y-6 border border-blue-100 dark:border-gray-700">
        {/* Hook */}
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-sm text-gray-700 dark:text-gray-300 uppercase tracking-wide">
              Hook
            </h3>
            <button
              onClick={() => copyToClipboard(ad.hook, 'Hook')}
              className="p-2 hover:bg-white/50 dark:hover:bg-gray-700 rounded-lg transition-colors"
              title="Copy hook"
            >
              {copiedField === 'Hook' ? (
                <Check className="w-4 h-4 text-green-600" />
              ) : (
                <Copy className="w-4 h-4 text-gray-600 dark:text-gray-400" />
              )}
            </button>
          </div>
          <p className="text-lg font-bold text-gray-900 dark:text-white leading-relaxed">
            {ad.hook}
          </p>
        </div>

        <div className="border-t border-blue-200 dark:border-gray-700" />

        {/* Body */}
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-sm text-gray-700 dark:text-gray-300 uppercase tracking-wide">
              Body
            </h3>
            <button
              onClick={() => copyToClipboard(ad.body, 'Body')}
              className="p-2 hover:bg-white/50 dark:hover:bg-gray-700 rounded-lg transition-colors"
              title="Copy body"
            >
              {copiedField === 'Body' ? (
                <Check className="w-4 h-4 text-green-600" />
              ) : (
                <Copy className="w-4 h-4 text-gray-600 dark:text-gray-400" />
              )}
            </button>
          </div>
          <p className="text-base text-gray-800 dark:text-gray-200 leading-relaxed whitespace-pre-wrap">
            {ad.body}
          </p>
        </div>

        <div className="border-t border-blue-200 dark:border-gray-700" />

        {/* CTA */}
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-sm text-gray-700 dark:text-gray-300 uppercase tracking-wide">
              Call to Action
            </h3>
            <button
              onClick={() => copyToClipboard(ad.cta, 'CTA')}
              className="p-2 hover:bg-white/50 dark:hover:bg-gray-700 rounded-lg transition-colors"
              title="Copy CTA"
            >
              {copiedField === 'CTA' ? (
                <Check className="w-4 h-4 text-green-600" />
              ) : (
                <Copy className="w-4 h-4 text-gray-600 dark:text-gray-400" />
              )}
            </button>
          </div>
          <p className="text-lg font-bold text-blue-600 dark:text-blue-400">
            {ad.cta}
          </p>
        </div>

        {/* Explanations Section - Only shown if research data exists */}
        {withResearch &&
          (ad.reasoning || ad.researchInsight || ad.competitorGap) && (
            <div className="border-t border-blue-200 dark:border-gray-700 pt-4">
              <button
                onClick={() => setShowExplanations(!showExplanations)}
                className="w-full flex items-center justify-between px-4 py-3 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-700 dark:to-gray-700 hover:from-blue-100 hover:to-purple-100 dark:hover:from-gray-600 dark:hover:to-gray-600 rounded-lg transition-all"
              >
                <span className="font-semibold text-gray-900 dark:text-white flex items-center gap-2">
                  <svg
                    className="w-5 h-5 text-purple-600 dark:text-purple-400"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
                    <path
                      fillRule="evenodd"
                      d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z"
                      clipRule="evenodd"
                    />
                  </svg>
                  Â¿Por quÃ© funciona?
                </span>
                <svg
                  className={`w-5 h-5 text-gray-600 dark:text-gray-400 transform transition-transform ${
                    showExplanations ? 'rotate-180' : ''
                  }`}
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </button>

              {showExplanations && (
                <div className="mt-4 space-y-4 animate-in fade-in slide-in-from-top-2 duration-300">
                  {/* Reasoning */}
                  {ad.reasoning && (
                    <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                      <div className="flex items-start gap-3">
                        <span className="text-2xl flex-shrink-0">ðŸ§ </span>
                        <div className="flex-1">
                          <h4 className="font-semibold text-blue-900 dark:text-blue-100 mb-1">
                            Reasoning
                          </h4>
                          <p className="text-sm text-blue-800 dark:text-blue-200 leading-relaxed">
                            {ad.reasoning}
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Research Insight */}
                  {ad.researchInsight && (
                    <div className="p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-800">
                      <div className="flex items-start gap-3">
                        <span className="text-2xl flex-shrink-0">ðŸ’¡</span>
                        <div className="flex-1">
                          <h4 className="font-semibold text-purple-900 dark:text-purple-100 mb-1">
                            Research Insight
                          </h4>
                          <p className="text-sm text-purple-800 dark:text-purple-200 leading-relaxed">
                            {ad.researchInsight}
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Competitor Gap */}
                  {ad.competitorGap && (
                    <div className="p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
                      <div className="flex items-start gap-3">
                        <span className="text-2xl flex-shrink-0">ðŸŽ¯</span>
                        <div className="flex-1">
                          <h4 className="font-semibold text-green-900 dark:text-green-100 mb-1">
                            Competitor Gap
                          </h4>
                          <p className="text-sm text-green-800 dark:text-green-200 leading-relaxed">
                            {ad.competitorGap}
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          )}

        {/* Copy All */}
        <button
          onClick={() =>
            copyToClipboard(
              `${ad.hook}\n\n${ad.body}\n\n${ad.cta}`,
              'Complete Ad'
            )
          }
          className="w-full px-4 py-2 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-900 dark:text-white font-medium rounded-lg border border-blue-200 dark:border-gray-600 transition-colors flex items-center justify-center gap-2"
        >
          {copiedField === 'Complete Ad' ? (
            <>
              <Check className="w-4 h-4" />
              Copied!
            </>
          ) : (
            <>
              <Copy className="w-4 h-4" />
              Copy Complete Ad
            </>
          )}
        </button>
      </div>
    </div>
  );
}
